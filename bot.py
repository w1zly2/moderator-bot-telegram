#–ò–º–ø–æ—Ä—Ç—ã
import aiogram
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from filters import IsAdminFilter
import datetime
import random
import asyncio
import config
import time
import db

#–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot = Bot(token=config.TOKEN, parse_mode="html")
dp = Dispatcher(bot)

#–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db.CreateUserDB()
db.CreateChatDB()

#–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –∞–¥–º–∏–Ω–æ–≤ —á–∞—Ç–∞
dp.filters_factory.bind(IsAdminFilter)

#–û—Å–Ω–æ–≤–Ω–æ–µ
@dp.message_handler(content_types=["new_chat_members"])
async def new_member(message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, <a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}</a>')
    await message.delete()

@dp.message_handler(commands='start')
async def start(message):
    await message.reply(f"""
–ü—Ä–∏–≤–µ—Ç, <a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}</a>
–Ø  –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞ @chat_python_ru
–ù–æ —è –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–∞—Ö
    
–ú–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /help
    
    """)

@dp.message_handler(commands='help')
async def commands(message):
    await message.reply(f"""
<code>!ban</code> = –±–∞–Ω—é
<code>!unban</code> = —É–±–µ—Ä–∞—é —Å –±–∞–Ω–∞
<code>!mute</code> = –∑–∞—Ç—ã–∫–∞—é —Ä–æ—Ç
<code>!unmute</code> = —Ä–∞–∑—Ä–µ—à–∞—é –≥–æ–≤–æ—Ä–∏—Ç—å
+ = –ø–æ–≤—ã—à–∞—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é
- = –ø–æ–Ω–∏–∂–∞—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é
<code>!report</code> = –∂–∞–ª—É—é—Å—å –∞–¥–º–∏–Ω–∞–º
<code>!info</code> = –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    
    """)

@dp.message_handler(lambda msg: msg.text.lower() == '–±–æ—Ç')
async def check_bot(message):
    await message.reply('‚úÖ–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!')

#–ö–æ–º–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(commands='mute', commands_prefix='!', is_chat_admin=True)
async def mute(message):
   if not message.reply_to_message:
      await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
      return
   try:
      muteint = int(message.text.split()[1])
      mutetype = message.text.split()[2]
      comment = " ".join(message.text.split()[3:])
   except IndexError:
      await message.reply('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!\n–ü—Ä–∏–º–µ—Ä:\n<code>!mute 1 —á –ø—Ä–∏—á–∏–Ω–∞</code>')
      return
   if mutetype == "—á" or mutetype == "—á–∞—Å–æ–≤" or mutetype == "—á–∞—Å":
      await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False), until_date=datetime.timedelta(hours=muteint))
      await message.reply(f'üë§–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <a href="tg://?id={message.from_user.id}">{message.from_user.first_name}</a>\nüîá–ó–∞–º—É—Ç–∏–ª: <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>\n‚è∞–°—Ä–æ–∫: {muteint} {mutetype}\nüìÉ–ü—Ä–∏—á–∏–Ω–∞: {comment}')
   if mutetype == "–º" or mutetype == "–º–∏–Ω—É—Ç" or mutetype == "–º–∏–Ω—É—Ç—ã":
      await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False), until_date=datetime.timedelta(minutes=muteint))
      await message.reply(f'üë§–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <a href="tg://?id={message.from_user.id}">{message.from_user.first_name}</a>\nüîá–ó–∞–º—É—Ç–∏–ª: <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>\n‚è∞–°—Ä–æ–∫: {muteint} {mutetype}\nüìÉ–ü—Ä–∏—á–∏–Ω–∞: {comment}')
   if mutetype == "–¥" or mutetype == "–¥–Ω–µ–π" or mutetype == "–¥–µ–Ω—å":
      await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False), until_date=datetime.timedelta(days=muteint))
      await message.reply(f'üë§–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <a href="tg://?id={message.from_user.id}">{message.from_user.first_name}</a>\nüîá–ó–∞–º—É—Ç–∏–ª: <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>\n‚è∞–°—Ä–æ–∫: {muteint} {mutetype}\nüìÉ–ü—Ä–∏—á–∏–Ω–∞: {comment}')

@dp.message_handler(commands='unmute', commands_prefix='!', is_chat_admin=True)
async def unmute(message):
   if not message.reply_to_message:
      await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
      return
   await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(True, True, True, True))
   await message.reply(f'üë§–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <a href="tg://?id={message.from_user.id}">{message.from_user.first_name}</a>\nüîä–†–∞–∑–º—É—Ç–∏–ª: <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>')

@dp.message_handler(commands='ban', commands_prefix='!', is_chat_admin=True)
async def ban(message):
   if not message.reply_to_message:
      await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
      return
   comment = " ".join(message.text.split()[1:])
   await bot.kick_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False))
   await message.reply(f'üë§–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <a href="tg://?id={message.from_user.id}">{message.from_user.first_name}</a>\n‚õî–ó–∞–±–∞–Ω–∏–ª: <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>\n‚è∞–°—Ä–æ–∫: –Ω–∞–≤—Å–µ–≥–¥–∞\nüìÉ–ü—Ä–∏—á–∏–Ω–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å): {comment}')

@dp.message_handler(commands='unban', commands_prefix='!', is_chat_admin=True)
async def unban(message):
   if not message.reply_to_message:
      await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
      return
   await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(True, True, True, True))
   await message.reply(f'üë§–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <a href="tg://?id={message.from_user.id}">{message.from_user.first_name}</a>\n‚ö†Ô∏è–†–∞–∑–±–∞–Ω–∏–ª: <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>')

#–†–µ–ø—É—Ç–∞—Ü–∏—è
@dp.message_handler(lambda msg: msg.text.lower().startswith('+'))
async def plus_rep(message):
   if not message.reply_to_message:
      await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
      return
   if message.from_user.id == message.reply_to_message.from_user.id:
      await message.reply("–ê –Ω–µ–ª—å–∑—è –Ω–∞–∫—Ä—É—á–∏–≤–∞—Ç—å —Å–µ–±–µ —Ä–µ–ø—É—Ç–∞—Ü–∏—é!üñï")
      return
   db.UpdateUserValue('reputation', 1, message.reply_to_message.from_user.id)
   db.con.commit()
   await message.reply("–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∑–∞—Å—á–∏—Ç–∞–Ω–æüëç")

@dp.message_handler(lambda msg: msg.text.lower().startswith('-'))
async def minus_rep(message):
   if not message.reply_to_message:
      await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
      return
   if message.from_user.id == message.reply_to_message.from_user.id:
      await message.reply("–ê –Ω–µ–ª—å–∑—è –Ω–∞–∫—Ä—É—á–∏–≤–∞—Ç—å —Å–µ–±–µ —Ä–µ–ø—É—Ç–∞—Ü–∏—é!üñï")
      return
   db.UpdateUserValueMinus('reputation', 1, message.reply_to_message.from_user.id)
   db.con.commit()
   await message.reply("–ü–æ–Ω–∏–∂–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∑–∞—Å—á–∏—Ç–∞–Ω–æüëé")


#–ü—Ä–æ—Ñ–∏–ª—å
@dp.message_handler(commands='info', commands_prefix='!')
async def profile(message):
   if not message.reply_to_message:
      for row in db.cursor.execute(f"SELECT reputation FROM users where id={message.from_user.id}"):
         await message.reply(f"""üë§–ò–º—è: {message.from_user.first_name}
üêï–Æ–∑–µ—Ä–Ω–µ–π–º: @{message.from_user.username}
üÜî–ê–π–¥–∏: <code>{message.from_user.id}</code>
üîù–†–µ–ø—É—Ç–∞—Ü–∏—è: {row[0]}""")
   else:
      for row in db.cursor.execute(f"SELECT reputation FROM users where id={message.reply_to_message.from_user.id}"):
         await message.reply(f"""üë§–ò–º—è: {message.reply_to_message.from_user.first_name}
üêï–Æ–∑–µ—Ä–Ω–µ–π–º: @{message.reply_to_message.from_user.username}
üÜî–ê–π–¥–∏: <code>{message.reply_to_message.from_user.id}</code>
üîù–†–µ–ø—É—Ç–∞—Ü–∏—è: {row[0]}""")

#–õ–∏–¥–µ—Ä–±–æ—Ä–¥—ã (—Ç–æ–ø)
@dp.message_handler(commands=['leaderboard', 'top', '–ª–∏–¥–µ—Ä—ã', '—Ç–æ–ø'], commands_prefix='!?./')
async def leaderboard(message):
   db.cursor.execute(f"SELECT name, reputation FROM users ORDER BY reputation DESC LIMIT 10")
   leadermsg = "<b>–¢–æ–ø 10 –ø–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏</b>:\n\n"
   fetchleader = db.cursor.fetchall()
   for i in fetchleader:
      leadermsg += f"{fetchleader.index(i) + 1}) {i[0]}:  {i[1]}$\n"
   await message.reply(str(leadermsg))

#–°—Ç–∞—Ç–∞
@dp.message_handler(commands=['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats', '—Å—Ç–∞—Ç–∞'], commands_prefix='!?./')
async def stats(message):
   db.cursor.execute("SELECT id FROM users")
   users = db.cursor.fetchall()
   db.cursor.execute(f"SELECT chat_id FROM chats")
   chats = db.cursor.fetchall()
   await message.reply(f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {str(len(users))}\nüí¨–ß–∞—Ç–æ–≤ –≤ –±–æ—Ç–µ: {str(len(chats))}')

#–Æ–∑–µ—Ä —Ä–∞—Å—Å—ã–ª–∫–∞ (—é–∑–µ—Ä–ø–æ—Å—Ç)
@dp.message_handler(commands=['userpost', '—é–∑–µ—Ä–ø–æ—Å—Ç'], commands_prefix='!?./')
async def userpost(message):
   if message.from_user.id == config.ADMIN_ID:
      userpost_text = " ".join(message.text.split()[1:])
      db.cursor.execute(f"SELECT id FROM users")
      users_query = db.cursor.fetchall()
      user_ids = [user[0] for user in users_query]
      confirm = []
      decline = []
      await message.reply('–†–∞—Å—Å—ã–ª–∫–∞ —é–∑–µ—Ä–ø–æ—Å—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å...')
      for user_send in user_ids:
         try:
            await bot.send_message(user_send, userpost_text)
            confirm.append(user_send)
         except:
            decline.append(user_send)
      await message.answer(f'üì£ –†–∞—Å—Å—ã–ª–∫–∞ —é–∑–µ—Ä–ø–æ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(confirm)}\n‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ: {len(decline)}')
   else:
      await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")

#–ß–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∞ (—á–∞—Ç–ø–æ—Å—Ç)
@dp.message_handler(commands=['chatpost', '—á–∞—Ç–ø–æ—Å—Ç'], commands_prefix='!?./')
async def chatpost(message):
   if message.from_user.id == config.ADMIN_ID:
      chatpost_text = " ".join(message.text.split()[1:])
      db.cursor.execute(f"SELECT chat_id FROM chats")
      chats_query = db.cursor.fetchall()
      chats_ids = [chat[0] for chat in chats_query]
      confirm = []
      decline = []
      await message.reply('–†–∞—Å—Å—ã–ª–∫–∞ —á–∞—Ç–ø–æ—Å—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å...')
      for chat_send in chats_ids:
         try:
            await bot.send_message(chat_send, chatpost_text)
            confirm.append(chat_send)
         except:
            decline.append(chat_send)
      await message.answer(f'üì£ –†–∞—Å—Å—ã–ª–∫–∞ —á–∞—Ç–ø–æ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(confirm)}\n‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ: {len(decline)}')
   else:
      await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")


#–†–µ–ø–æ—Ä—Ç—ã
@dp.message_handler(commands='report', commands_prefix='!')
async def report(message):
      admins_list = [admin.user.id for admin in await bot.get_chat_administrators(chat_id=message.chat.id)]
      report_comment = " ".join(message.text.split()[1:])
      await message.reply("–†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
      for adm_id in admins_list:
         await bot.send_message(adm_id, text=f'–ü–æ—Å—Ç—É–ø–∏–ª —Ä–µ–ø–æ—Ä—Ç!\nhttps://t.me/{message.chat.username}/{message.reply_to_message.message_id}\n–ü—Ä–∏—á–∏–Ω–∞: <b>{report_comment}</b>')

#–§–∏–ª—å—Ç—Ä —Ç–µ–∫—Å—Ç–∞
@dp.message_handler(content_types=['text'])
async def filter_text(message):

   #–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   if message.chat.type != 'private':
      db.cursor.execute(f"SELECT chat_name, chat_id FROM chats where chat_id = {message.chat.id}")
      if db.cursor.fetchone() == None:
         db.InsertChatValues(message.chat.title, message.chat.id)

   #–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   db.cursor.execute(f"SELECT name FROM users where id = {message.from_user.id}")
   if db.cursor.fetchone() == None:
      db.InsertUserValues(message.from_user.first_name, message.from_user.id)


#–ü–æ–ª–ª–∏–Ω–≥
if __name__ == "__main__":
   executor.start_polling(dp, skip_updates=True)